import pygamefrom pygame.locals import *import sysimport cmathimport mathdef suite(c):	z = complex(0,0)	n = 0	while(abs(z) < 2 and n < 255):		z = z*z + c		n += 1	return n#def ratio(start, value, width):#		return (value - start) / widthpygame.init()view = pygame.Rect(0,0, 512, 512)surface = pygame.display.set_mode((view.width, view.height))pxArray = pygame.PixelArray(surface)space = pygame.Rect(-2, -2, 4, 4)pygame.display.set_caption("Fractal")def color(nSteps):	"""returns a color Object for the number of steps returend by suite()"""	col = pygame.color.Color(0)	col.hsva = (nSteps, 100, 100, 100)	return coldef splitRectInFour(r):	# divide in 4 quadrants	mx = r.left + width / 2	my = r.top + r.height / 2	split = [r] * 4	for i in split:		i.width /= 2		i.height /= 2	# sequence of children is 	# top-left, top-right, bottom-left, bottom-right	split[1].left = mx + 1	split[2].top = my + 1	split[3].left = mx + 1	split[3].top = my + 1	return splitclass Fractal:	def __init__(self, spaceRect, viewRect):		self.space = spaceRect		self.view = viewRect				nbPixels = width * height		if nbPixels >= 255:			self.children = self.divide()		else:			self.children = null		def divide(self):		s = splitRectInFour(self.space)		v = splitRectInFour(self.view)		out = [null] * 4		for c in range(4):			out[c] = Fractal(s[c], v[c])		return out 							def pixelToComplex(self, x, y):		px = x / self.view.width * self.space.width + self.space.left		py = y / self.view.height * self.space.height + self.space.top		return complex(px, py)					def draw(self):		"""fonction recursive Ã  la quadtree"""		# Calculate 5 points : 4 corners et milieu		sp = self.space		tl = suite(complex(sp.left, sp.top))		tr = suite(complex(sp.left + sp.width, sp.top))		bl = suite(complex(sp.left, sp.top + sp.height))		br = suite(complex(sp.left + sp.width, sp.top + sp.height))		cen = suite((tl + br) / 2)				if tl == tr and bl == br and tl == bl and tl == cen:			surface.box(self.view, color(tl))		else:				if self.space.left		for i in range(self.view.left, self.view.left + self.view.width):			for j in range( self.view.top, self.view.top + self.view.height):				c = self.pixelToComplex(i, j)				p = suite(c)				col = color(p)				pxArray[i, j] = col			pygame.display.update([self.view])				def _listen_for_event(self):		"""Listens for game events like key presses etc"""		for event in pygame.event.get():			if event.type == pygame.QUIT:				self._handle_exit()		def _handle_exit(self):		sys.exit(1)if __name__ == "__main__":	game = Fractal(space, view)	game.run()